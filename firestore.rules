rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isDevMode() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionTier == 'dev_mode';
    }
    
    // Enhanced community creation validation
    function canCreateCommunity() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.canCreateCommunity == true || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionTier == 'dev_mode');
    }
    
    // New helper functions for community validation
    function isValidCommunityData() {
      let data = request.resource.data;
      return data.name.size() >= 3 && 
             data.name.size() <= 100 &&
             data.description.size() <= 1000 &&
             (data.coverImageUrl == null || data.coverImageUrl.size() <= 500) &&
             (data.iconImageUrl == null || data.iconImageUrl.size() <= 500) &&
             data.createdAt is timestamp &&
             data.creatorId == request.auth.uid;
    }
    
    function isValidImageUrl(url) {
      return url == null || 
        (url is string && 
         url.size() <= 500 && 
         url.matches('^https?://.*'));
    }
    
    // Allow users to read and write their own profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow creation for new sign-ups WITHOUT requiring authentication
      allow create: if true; // This allows new users to create their document during sign-up
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow delete: if request.auth != null && isAdmin(); // Only admins can delete users
    }
    
    // Enhanced community rules with validation
    match /communities/{communityId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null &&
        canCreateCommunity() &&
        isValidCommunityData() &&
        isValidImageUrl(request.resource.data.coverImageUrl) &&
        isValidImageUrl(request.resource.data.iconImageUrl);
      
      allow update: if request.auth != null && (
        // Creator can update their community
        request.auth.uid == resource.data.creatorId ||
        // Admin can update any community
        isAdmin()
      ) && 
      // Validate updates
      isValidImageUrl(request.resource.data.coverImageUrl) &&
      isValidImageUrl(request.resource.data.iconImageUrl) &&
      // Ensure critical fields can't be changed
      request.resource.data.creatorId == resource.data.creatorId &&
      request.resource.data.createdAt == resource.data.createdAt;
      
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.creatorId || isAdmin());
    }
    
    // Membership rules
    match /memberships/{membershipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.userId);
    }
    
    // Post rules
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comment rules
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Donation rules
    match /donations/{donationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Subscription rules
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Admin actions - audit trail for admin operations
    match /admin_actions/{actionId} {
      allow read: if request.auth != null && isAdmin();
      allow create: if request.auth != null && isAdmin();
      allow update, delete: if false; // Admin actions should be immutable
    }
    
    // Default deny
    match /{document=**} {
      // Admin override - admins can access all data
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isAdmin();
      
      // For non-admins, deny by default
      allow read, write: if false;
    }
  }
}